// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cutejiuges/easy-blog/models/gen_model/domain"
)

func newTbMessage(db *gorm.DB, opts ...gen.DOOption) tbMessage {
	_tbMessage := tbMessage{}

	_tbMessage.tbMessageDo.UseDB(db, opts...)
	_tbMessage.tbMessageDo.UseModel(&domain.TbMessage{})

	tableName := _tbMessage.tbMessageDo.TableName()
	_tbMessage.ALL = field.NewAsterisk(tableName)
	_tbMessage.ID = field.NewInt64(tableName, "id")
	_tbMessage.CreatedAt = field.NewTime(tableName, "created_at")
	_tbMessage.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tbMessage.DeletedAt = field.NewField(tableName, "deleted_at")
	_tbMessage.SendUserID = field.NewInt64(tableName, "send_user_id")
	_tbMessage.SendUserNickName = field.NewString(tableName, "send_user_nick_name")
	_tbMessage.SendUserAvatar = field.NewString(tableName, "send_user_avatar")
	_tbMessage.ReceiveUserID = field.NewInt64(tableName, "receive_user_id")
	_tbMessage.ReceiveUserNickName = field.NewString(tableName, "receive_user_nick_name")
	_tbMessage.ReceiveUserAvatar = field.NewString(tableName, "receive_user_avatar")
	_tbMessage.IsRead = field.NewInt64(tableName, "is_read")
	_tbMessage.Content = field.NewString(tableName, "content")

	_tbMessage.fillFieldMap()

	return _tbMessage
}

type tbMessage struct {
	tbMessageDo tbMessageDo

	ALL                 field.Asterisk
	ID                  field.Int64
	CreatedAt           field.Time
	UpdatedAt           field.Time
	DeletedAt           field.Field
	SendUserID          field.Int64
	SendUserNickName    field.String
	SendUserAvatar      field.String
	ReceiveUserID       field.Int64
	ReceiveUserNickName field.String
	ReceiveUserAvatar   field.String
	IsRead              field.Int64
	Content             field.String

	fieldMap map[string]field.Expr
}

func (t tbMessage) Table(newTableName string) *tbMessage {
	t.tbMessageDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tbMessage) As(alias string) *tbMessage {
	t.tbMessageDo.DO = *(t.tbMessageDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tbMessage) updateTableName(table string) *tbMessage {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.SendUserID = field.NewInt64(table, "send_user_id")
	t.SendUserNickName = field.NewString(table, "send_user_nick_name")
	t.SendUserAvatar = field.NewString(table, "send_user_avatar")
	t.ReceiveUserID = field.NewInt64(table, "receive_user_id")
	t.ReceiveUserNickName = field.NewString(table, "receive_user_nick_name")
	t.ReceiveUserAvatar = field.NewString(table, "receive_user_avatar")
	t.IsRead = field.NewInt64(table, "is_read")
	t.Content = field.NewString(table, "content")

	t.fillFieldMap()

	return t
}

func (t *tbMessage) WithContext(ctx context.Context) ITbMessageDo {
	return t.tbMessageDo.WithContext(ctx)
}

func (t tbMessage) TableName() string { return t.tbMessageDo.TableName() }

func (t tbMessage) Alias() string { return t.tbMessageDo.Alias() }

func (t tbMessage) Columns(cols ...field.Expr) gen.Columns { return t.tbMessageDo.Columns(cols...) }

func (t *tbMessage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tbMessage) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["send_user_id"] = t.SendUserID
	t.fieldMap["send_user_nick_name"] = t.SendUserNickName
	t.fieldMap["send_user_avatar"] = t.SendUserAvatar
	t.fieldMap["receive_user_id"] = t.ReceiveUserID
	t.fieldMap["receive_user_nick_name"] = t.ReceiveUserNickName
	t.fieldMap["receive_user_avatar"] = t.ReceiveUserAvatar
	t.fieldMap["is_read"] = t.IsRead
	t.fieldMap["content"] = t.Content
}

func (t tbMessage) clone(db *gorm.DB) tbMessage {
	t.tbMessageDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tbMessage) replaceDB(db *gorm.DB) tbMessage {
	t.tbMessageDo.ReplaceDB(db)
	return t
}

type tbMessageDo struct{ gen.DO }

type ITbMessageDo interface {
	gen.SubQuery
	Debug() ITbMessageDo
	WithContext(ctx context.Context) ITbMessageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITbMessageDo
	WriteDB() ITbMessageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITbMessageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITbMessageDo
	Not(conds ...gen.Condition) ITbMessageDo
	Or(conds ...gen.Condition) ITbMessageDo
	Select(conds ...field.Expr) ITbMessageDo
	Where(conds ...gen.Condition) ITbMessageDo
	Order(conds ...field.Expr) ITbMessageDo
	Distinct(cols ...field.Expr) ITbMessageDo
	Omit(cols ...field.Expr) ITbMessageDo
	Join(table schema.Tabler, on ...field.Expr) ITbMessageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITbMessageDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITbMessageDo
	Group(cols ...field.Expr) ITbMessageDo
	Having(conds ...gen.Condition) ITbMessageDo
	Limit(limit int) ITbMessageDo
	Offset(offset int) ITbMessageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITbMessageDo
	Unscoped() ITbMessageDo
	Create(values ...*domain.TbMessage) error
	CreateInBatches(values []*domain.TbMessage, batchSize int) error
	Save(values ...*domain.TbMessage) error
	First() (*domain.TbMessage, error)
	Take() (*domain.TbMessage, error)
	Last() (*domain.TbMessage, error)
	Find() ([]*domain.TbMessage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.TbMessage, err error)
	FindInBatches(result *[]*domain.TbMessage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.TbMessage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITbMessageDo
	Assign(attrs ...field.AssignExpr) ITbMessageDo
	Joins(fields ...field.RelationField) ITbMessageDo
	Preload(fields ...field.RelationField) ITbMessageDo
	FirstOrInit() (*domain.TbMessage, error)
	FirstOrCreate() (*domain.TbMessage, error)
	FindByPage(offset int, limit int) (result []*domain.TbMessage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITbMessageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tbMessageDo) Debug() ITbMessageDo {
	return t.withDO(t.DO.Debug())
}

func (t tbMessageDo) WithContext(ctx context.Context) ITbMessageDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tbMessageDo) ReadDB() ITbMessageDo {
	return t.Clauses(dbresolver.Read)
}

func (t tbMessageDo) WriteDB() ITbMessageDo {
	return t.Clauses(dbresolver.Write)
}

func (t tbMessageDo) Session(config *gorm.Session) ITbMessageDo {
	return t.withDO(t.DO.Session(config))
}

func (t tbMessageDo) Clauses(conds ...clause.Expression) ITbMessageDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tbMessageDo) Returning(value interface{}, columns ...string) ITbMessageDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tbMessageDo) Not(conds ...gen.Condition) ITbMessageDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tbMessageDo) Or(conds ...gen.Condition) ITbMessageDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tbMessageDo) Select(conds ...field.Expr) ITbMessageDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tbMessageDo) Where(conds ...gen.Condition) ITbMessageDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tbMessageDo) Order(conds ...field.Expr) ITbMessageDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tbMessageDo) Distinct(cols ...field.Expr) ITbMessageDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tbMessageDo) Omit(cols ...field.Expr) ITbMessageDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tbMessageDo) Join(table schema.Tabler, on ...field.Expr) ITbMessageDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tbMessageDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITbMessageDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tbMessageDo) RightJoin(table schema.Tabler, on ...field.Expr) ITbMessageDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tbMessageDo) Group(cols ...field.Expr) ITbMessageDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tbMessageDo) Having(conds ...gen.Condition) ITbMessageDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tbMessageDo) Limit(limit int) ITbMessageDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tbMessageDo) Offset(offset int) ITbMessageDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tbMessageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITbMessageDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tbMessageDo) Unscoped() ITbMessageDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tbMessageDo) Create(values ...*domain.TbMessage) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tbMessageDo) CreateInBatches(values []*domain.TbMessage, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tbMessageDo) Save(values ...*domain.TbMessage) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tbMessageDo) First() (*domain.TbMessage, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.TbMessage), nil
	}
}

func (t tbMessageDo) Take() (*domain.TbMessage, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.TbMessage), nil
	}
}

func (t tbMessageDo) Last() (*domain.TbMessage, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.TbMessage), nil
	}
}

func (t tbMessageDo) Find() ([]*domain.TbMessage, error) {
	result, err := t.DO.Find()
	return result.([]*domain.TbMessage), err
}

func (t tbMessageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.TbMessage, err error) {
	buf := make([]*domain.TbMessage, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tbMessageDo) FindInBatches(result *[]*domain.TbMessage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tbMessageDo) Attrs(attrs ...field.AssignExpr) ITbMessageDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tbMessageDo) Assign(attrs ...field.AssignExpr) ITbMessageDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tbMessageDo) Joins(fields ...field.RelationField) ITbMessageDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tbMessageDo) Preload(fields ...field.RelationField) ITbMessageDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tbMessageDo) FirstOrInit() (*domain.TbMessage, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.TbMessage), nil
	}
}

func (t tbMessageDo) FirstOrCreate() (*domain.TbMessage, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.TbMessage), nil
	}
}

func (t tbMessageDo) FindByPage(offset int, limit int) (result []*domain.TbMessage, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tbMessageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tbMessageDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tbMessageDo) Delete(models ...*domain.TbMessage) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tbMessageDo) withDO(do gen.Dao) *tbMessageDo {
	t.DO = *do.(*gen.DO)
	return t
}
