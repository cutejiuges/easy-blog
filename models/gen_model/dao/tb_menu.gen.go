// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cutejiuges/easy-blog/models/gen_model/domain"
)

func newTbMenu(db *gorm.DB, opts ...gen.DOOption) tbMenu {
	_tbMenu := tbMenu{}

	_tbMenu.tbMenuDo.UseDB(db, opts...)
	_tbMenu.tbMenuDo.UseModel(&domain.TbMenu{})

	tableName := _tbMenu.tbMenuDo.TableName()
	_tbMenu.ALL = field.NewAsterisk(tableName)
	_tbMenu.ID = field.NewInt64(tableName, "id")
	_tbMenu.CreatedAt = field.NewTime(tableName, "created_at")
	_tbMenu.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tbMenu.DeletedAt = field.NewField(tableName, "deleted_at")
	_tbMenu.MenuTitle = field.NewString(tableName, "menu_title")
	_tbMenu.MenuTitleEn = field.NewString(tableName, "menu_title_en")
	_tbMenu.Slogan = field.NewString(tableName, "slogan")
	_tbMenu.Abstract = field.NewString(tableName, "abstract")
	_tbMenu.AbstractTime = field.NewInt64(tableName, "abstract_time")
	_tbMenu.BannerTime = field.NewInt64(tableName, "banner_time")
	_tbMenu.Sort = field.NewInt64(tableName, "sort")

	_tbMenu.fillFieldMap()

	return _tbMenu
}

type tbMenu struct {
	tbMenuDo tbMenuDo

	ALL          field.Asterisk
	ID           field.Int64
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	MenuTitle    field.String
	MenuTitleEn  field.String
	Slogan       field.String
	Abstract     field.String
	AbstractTime field.Int64
	BannerTime   field.Int64
	Sort         field.Int64

	fieldMap map[string]field.Expr
}

func (t tbMenu) Table(newTableName string) *tbMenu {
	t.tbMenuDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tbMenu) As(alias string) *tbMenu {
	t.tbMenuDo.DO = *(t.tbMenuDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tbMenu) updateTableName(table string) *tbMenu {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.MenuTitle = field.NewString(table, "menu_title")
	t.MenuTitleEn = field.NewString(table, "menu_title_en")
	t.Slogan = field.NewString(table, "slogan")
	t.Abstract = field.NewString(table, "abstract")
	t.AbstractTime = field.NewInt64(table, "abstract_time")
	t.BannerTime = field.NewInt64(table, "banner_time")
	t.Sort = field.NewInt64(table, "sort")

	t.fillFieldMap()

	return t
}

func (t *tbMenu) WithContext(ctx context.Context) ITbMenuDo { return t.tbMenuDo.WithContext(ctx) }

func (t tbMenu) TableName() string { return t.tbMenuDo.TableName() }

func (t tbMenu) Alias() string { return t.tbMenuDo.Alias() }

func (t tbMenu) Columns(cols ...field.Expr) gen.Columns { return t.tbMenuDo.Columns(cols...) }

func (t *tbMenu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tbMenu) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["menu_title"] = t.MenuTitle
	t.fieldMap["menu_title_en"] = t.MenuTitleEn
	t.fieldMap["slogan"] = t.Slogan
	t.fieldMap["abstract"] = t.Abstract
	t.fieldMap["abstract_time"] = t.AbstractTime
	t.fieldMap["banner_time"] = t.BannerTime
	t.fieldMap["sort"] = t.Sort
}

func (t tbMenu) clone(db *gorm.DB) tbMenu {
	t.tbMenuDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tbMenu) replaceDB(db *gorm.DB) tbMenu {
	t.tbMenuDo.ReplaceDB(db)
	return t
}

type tbMenuDo struct{ gen.DO }

type ITbMenuDo interface {
	gen.SubQuery
	Debug() ITbMenuDo
	WithContext(ctx context.Context) ITbMenuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITbMenuDo
	WriteDB() ITbMenuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITbMenuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITbMenuDo
	Not(conds ...gen.Condition) ITbMenuDo
	Or(conds ...gen.Condition) ITbMenuDo
	Select(conds ...field.Expr) ITbMenuDo
	Where(conds ...gen.Condition) ITbMenuDo
	Order(conds ...field.Expr) ITbMenuDo
	Distinct(cols ...field.Expr) ITbMenuDo
	Omit(cols ...field.Expr) ITbMenuDo
	Join(table schema.Tabler, on ...field.Expr) ITbMenuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITbMenuDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITbMenuDo
	Group(cols ...field.Expr) ITbMenuDo
	Having(conds ...gen.Condition) ITbMenuDo
	Limit(limit int) ITbMenuDo
	Offset(offset int) ITbMenuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITbMenuDo
	Unscoped() ITbMenuDo
	Create(values ...*domain.TbMenu) error
	CreateInBatches(values []*domain.TbMenu, batchSize int) error
	Save(values ...*domain.TbMenu) error
	First() (*domain.TbMenu, error)
	Take() (*domain.TbMenu, error)
	Last() (*domain.TbMenu, error)
	Find() ([]*domain.TbMenu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.TbMenu, err error)
	FindInBatches(result *[]*domain.TbMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.TbMenu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITbMenuDo
	Assign(attrs ...field.AssignExpr) ITbMenuDo
	Joins(fields ...field.RelationField) ITbMenuDo
	Preload(fields ...field.RelationField) ITbMenuDo
	FirstOrInit() (*domain.TbMenu, error)
	FirstOrCreate() (*domain.TbMenu, error)
	FindByPage(offset int, limit int) (result []*domain.TbMenu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITbMenuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tbMenuDo) Debug() ITbMenuDo {
	return t.withDO(t.DO.Debug())
}

func (t tbMenuDo) WithContext(ctx context.Context) ITbMenuDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tbMenuDo) ReadDB() ITbMenuDo {
	return t.Clauses(dbresolver.Read)
}

func (t tbMenuDo) WriteDB() ITbMenuDo {
	return t.Clauses(dbresolver.Write)
}

func (t tbMenuDo) Session(config *gorm.Session) ITbMenuDo {
	return t.withDO(t.DO.Session(config))
}

func (t tbMenuDo) Clauses(conds ...clause.Expression) ITbMenuDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tbMenuDo) Returning(value interface{}, columns ...string) ITbMenuDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tbMenuDo) Not(conds ...gen.Condition) ITbMenuDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tbMenuDo) Or(conds ...gen.Condition) ITbMenuDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tbMenuDo) Select(conds ...field.Expr) ITbMenuDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tbMenuDo) Where(conds ...gen.Condition) ITbMenuDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tbMenuDo) Order(conds ...field.Expr) ITbMenuDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tbMenuDo) Distinct(cols ...field.Expr) ITbMenuDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tbMenuDo) Omit(cols ...field.Expr) ITbMenuDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tbMenuDo) Join(table schema.Tabler, on ...field.Expr) ITbMenuDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tbMenuDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITbMenuDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tbMenuDo) RightJoin(table schema.Tabler, on ...field.Expr) ITbMenuDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tbMenuDo) Group(cols ...field.Expr) ITbMenuDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tbMenuDo) Having(conds ...gen.Condition) ITbMenuDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tbMenuDo) Limit(limit int) ITbMenuDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tbMenuDo) Offset(offset int) ITbMenuDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tbMenuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITbMenuDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tbMenuDo) Unscoped() ITbMenuDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tbMenuDo) Create(values ...*domain.TbMenu) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tbMenuDo) CreateInBatches(values []*domain.TbMenu, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tbMenuDo) Save(values ...*domain.TbMenu) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tbMenuDo) First() (*domain.TbMenu, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.TbMenu), nil
	}
}

func (t tbMenuDo) Take() (*domain.TbMenu, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.TbMenu), nil
	}
}

func (t tbMenuDo) Last() (*domain.TbMenu, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.TbMenu), nil
	}
}

func (t tbMenuDo) Find() ([]*domain.TbMenu, error) {
	result, err := t.DO.Find()
	return result.([]*domain.TbMenu), err
}

func (t tbMenuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.TbMenu, err error) {
	buf := make([]*domain.TbMenu, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tbMenuDo) FindInBatches(result *[]*domain.TbMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tbMenuDo) Attrs(attrs ...field.AssignExpr) ITbMenuDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tbMenuDo) Assign(attrs ...field.AssignExpr) ITbMenuDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tbMenuDo) Joins(fields ...field.RelationField) ITbMenuDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tbMenuDo) Preload(fields ...field.RelationField) ITbMenuDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tbMenuDo) FirstOrInit() (*domain.TbMenu, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.TbMenu), nil
	}
}

func (t tbMenuDo) FirstOrCreate() (*domain.TbMenu, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.TbMenu), nil
	}
}

func (t tbMenuDo) FindByPage(offset int, limit int) (result []*domain.TbMenu, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tbMenuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tbMenuDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tbMenuDo) Delete(models ...*domain.TbMenu) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tbMenuDo) withDO(do gen.Dao) *tbMenuDo {
	t.DO = *do.(*gen.DO)
	return t
}
