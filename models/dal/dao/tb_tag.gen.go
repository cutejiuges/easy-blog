// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cutejiuges/easy-blog/models/dal/entities"
)

func newTbTag(db *gorm.DB, opts ...gen.DOOption) tbTag {
	_tbTag := tbTag{}

	_tbTag.tbTagDo.UseDB(db, opts...)
	_tbTag.tbTagDo.UseModel(&entities.TbTag{})

	tableName := _tbTag.tbTagDo.TableName()
	_tbTag.ALL = field.NewAsterisk(tableName)
	_tbTag.ID = field.NewInt64(tableName, "id")
	_tbTag.CreatedAt = field.NewTime(tableName, "created_at")
	_tbTag.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tbTag.DeletedAt = field.NewField(tableName, "deleted_at")
	_tbTag.Title = field.NewString(tableName, "title")

	_tbTag.fillFieldMap()

	return _tbTag
}

type tbTag struct {
	tbTagDo tbTagDo

	ALL       field.Asterisk
	ID        field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Title     field.String

	fieldMap map[string]field.Expr
}

func (t tbTag) Table(newTableName string) *tbTag {
	t.tbTagDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tbTag) As(alias string) *tbTag {
	t.tbTagDo.DO = *(t.tbTagDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tbTag) updateTableName(table string) *tbTag {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.Title = field.NewString(table, "title")

	t.fillFieldMap()

	return t
}

func (t *tbTag) WithContext(ctx context.Context) ITbTagDo { return t.tbTagDo.WithContext(ctx) }

func (t tbTag) TableName() string { return t.tbTagDo.TableName() }

func (t tbTag) Alias() string { return t.tbTagDo.Alias() }

func (t tbTag) Columns(cols ...field.Expr) gen.Columns { return t.tbTagDo.Columns(cols...) }

func (t *tbTag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tbTag) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["title"] = t.Title
}

func (t tbTag) clone(db *gorm.DB) tbTag {
	t.tbTagDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tbTag) replaceDB(db *gorm.DB) tbTag {
	t.tbTagDo.ReplaceDB(db)
	return t
}

type tbTagDo struct{ gen.DO }

type ITbTagDo interface {
	gen.SubQuery
	Debug() ITbTagDo
	WithContext(ctx context.Context) ITbTagDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITbTagDo
	WriteDB() ITbTagDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITbTagDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITbTagDo
	Not(conds ...gen.Condition) ITbTagDo
	Or(conds ...gen.Condition) ITbTagDo
	Select(conds ...field.Expr) ITbTagDo
	Where(conds ...gen.Condition) ITbTagDo
	Order(conds ...field.Expr) ITbTagDo
	Distinct(cols ...field.Expr) ITbTagDo
	Omit(cols ...field.Expr) ITbTagDo
	Join(table schema.Tabler, on ...field.Expr) ITbTagDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITbTagDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITbTagDo
	Group(cols ...field.Expr) ITbTagDo
	Having(conds ...gen.Condition) ITbTagDo
	Limit(limit int) ITbTagDo
	Offset(offset int) ITbTagDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITbTagDo
	Unscoped() ITbTagDo
	Create(values ...*entities.TbTag) error
	CreateInBatches(values []*entities.TbTag, batchSize int) error
	Save(values ...*entities.TbTag) error
	First() (*entities.TbTag, error)
	Take() (*entities.TbTag, error)
	Last() (*entities.TbTag, error)
	Find() ([]*entities.TbTag, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.TbTag, err error)
	FindInBatches(result *[]*entities.TbTag, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entities.TbTag) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITbTagDo
	Assign(attrs ...field.AssignExpr) ITbTagDo
	Joins(fields ...field.RelationField) ITbTagDo
	Preload(fields ...field.RelationField) ITbTagDo
	FirstOrInit() (*entities.TbTag, error)
	FirstOrCreate() (*entities.TbTag, error)
	FindByPage(offset int, limit int) (result []*entities.TbTag, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITbTagDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tbTagDo) Debug() ITbTagDo {
	return t.withDO(t.DO.Debug())
}

func (t tbTagDo) WithContext(ctx context.Context) ITbTagDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tbTagDo) ReadDB() ITbTagDo {
	return t.Clauses(dbresolver.Read)
}

func (t tbTagDo) WriteDB() ITbTagDo {
	return t.Clauses(dbresolver.Write)
}

func (t tbTagDo) Session(config *gorm.Session) ITbTagDo {
	return t.withDO(t.DO.Session(config))
}

func (t tbTagDo) Clauses(conds ...clause.Expression) ITbTagDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tbTagDo) Returning(value interface{}, columns ...string) ITbTagDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tbTagDo) Not(conds ...gen.Condition) ITbTagDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tbTagDo) Or(conds ...gen.Condition) ITbTagDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tbTagDo) Select(conds ...field.Expr) ITbTagDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tbTagDo) Where(conds ...gen.Condition) ITbTagDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tbTagDo) Order(conds ...field.Expr) ITbTagDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tbTagDo) Distinct(cols ...field.Expr) ITbTagDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tbTagDo) Omit(cols ...field.Expr) ITbTagDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tbTagDo) Join(table schema.Tabler, on ...field.Expr) ITbTagDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tbTagDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITbTagDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tbTagDo) RightJoin(table schema.Tabler, on ...field.Expr) ITbTagDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tbTagDo) Group(cols ...field.Expr) ITbTagDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tbTagDo) Having(conds ...gen.Condition) ITbTagDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tbTagDo) Limit(limit int) ITbTagDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tbTagDo) Offset(offset int) ITbTagDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tbTagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITbTagDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tbTagDo) Unscoped() ITbTagDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tbTagDo) Create(values ...*entities.TbTag) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tbTagDo) CreateInBatches(values []*entities.TbTag, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tbTagDo) Save(values ...*entities.TbTag) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tbTagDo) First() (*entities.TbTag, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entities.TbTag), nil
	}
}

func (t tbTagDo) Take() (*entities.TbTag, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entities.TbTag), nil
	}
}

func (t tbTagDo) Last() (*entities.TbTag, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entities.TbTag), nil
	}
}

func (t tbTagDo) Find() ([]*entities.TbTag, error) {
	result, err := t.DO.Find()
	return result.([]*entities.TbTag), err
}

func (t tbTagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.TbTag, err error) {
	buf := make([]*entities.TbTag, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tbTagDo) FindInBatches(result *[]*entities.TbTag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tbTagDo) Attrs(attrs ...field.AssignExpr) ITbTagDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tbTagDo) Assign(attrs ...field.AssignExpr) ITbTagDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tbTagDo) Joins(fields ...field.RelationField) ITbTagDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tbTagDo) Preload(fields ...field.RelationField) ITbTagDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tbTagDo) FirstOrInit() (*entities.TbTag, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entities.TbTag), nil
	}
}

func (t tbTagDo) FirstOrCreate() (*entities.TbTag, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entities.TbTag), nil
	}
}

func (t tbTagDo) FindByPage(offset int, limit int) (result []*entities.TbTag, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tbTagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tbTagDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tbTagDo) Delete(models ...*entities.TbTag) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tbTagDo) withDO(do gen.Dao) *tbTagDo {
	t.DO = *do.(*gen.DO)
	return t
}
