// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cutejiuges/easy-blog/models/dal/entities"
)

func newTbLoginDatum(db *gorm.DB, opts ...gen.DOOption) tbLoginDatum {
	_tbLoginDatum := tbLoginDatum{}

	_tbLoginDatum.tbLoginDatumDo.UseDB(db, opts...)
	_tbLoginDatum.tbLoginDatumDo.UseModel(&entities.TbLoginDatum{})

	tableName := _tbLoginDatum.tbLoginDatumDo.TableName()
	_tbLoginDatum.ALL = field.NewAsterisk(tableName)
	_tbLoginDatum.ID = field.NewInt64(tableName, "id")
	_tbLoginDatum.CreatedAt = field.NewTime(tableName, "created_at")
	_tbLoginDatum.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tbLoginDatum.DeletedAt = field.NewField(tableName, "deleted_at")
	_tbLoginDatum.UserID = field.NewInt64(tableName, "user_id")
	_tbLoginDatum.IP = field.NewString(tableName, "ip")
	_tbLoginDatum.NickName = field.NewString(tableName, "nick_name")
	_tbLoginDatum.Token = field.NewString(tableName, "token")
	_tbLoginDatum.Device = field.NewString(tableName, "device")
	_tbLoginDatum.Addr = field.NewString(tableName, "addr")

	_tbLoginDatum.fillFieldMap()

	return _tbLoginDatum
}

type tbLoginDatum struct {
	tbLoginDatumDo tbLoginDatumDo

	ALL       field.Asterisk
	ID        field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	UserID    field.Int64
	IP        field.String
	NickName  field.String
	Token     field.String
	Device    field.String
	Addr      field.String

	fieldMap map[string]field.Expr
}

func (t tbLoginDatum) Table(newTableName string) *tbLoginDatum {
	t.tbLoginDatumDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tbLoginDatum) As(alias string) *tbLoginDatum {
	t.tbLoginDatumDo.DO = *(t.tbLoginDatumDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tbLoginDatum) updateTableName(table string) *tbLoginDatum {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.UserID = field.NewInt64(table, "user_id")
	t.IP = field.NewString(table, "ip")
	t.NickName = field.NewString(table, "nick_name")
	t.Token = field.NewString(table, "token")
	t.Device = field.NewString(table, "device")
	t.Addr = field.NewString(table, "addr")

	t.fillFieldMap()

	return t
}

func (t *tbLoginDatum) WithContext(ctx context.Context) ITbLoginDatumDo {
	return t.tbLoginDatumDo.WithContext(ctx)
}

func (t tbLoginDatum) TableName() string { return t.tbLoginDatumDo.TableName() }

func (t tbLoginDatum) Alias() string { return t.tbLoginDatumDo.Alias() }

func (t tbLoginDatum) Columns(cols ...field.Expr) gen.Columns {
	return t.tbLoginDatumDo.Columns(cols...)
}

func (t *tbLoginDatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tbLoginDatum) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 10)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["ip"] = t.IP
	t.fieldMap["nick_name"] = t.NickName
	t.fieldMap["token"] = t.Token
	t.fieldMap["device"] = t.Device
	t.fieldMap["addr"] = t.Addr
}

func (t tbLoginDatum) clone(db *gorm.DB) tbLoginDatum {
	t.tbLoginDatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tbLoginDatum) replaceDB(db *gorm.DB) tbLoginDatum {
	t.tbLoginDatumDo.ReplaceDB(db)
	return t
}

type tbLoginDatumDo struct{ gen.DO }

type ITbLoginDatumDo interface {
	gen.SubQuery
	Debug() ITbLoginDatumDo
	WithContext(ctx context.Context) ITbLoginDatumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITbLoginDatumDo
	WriteDB() ITbLoginDatumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITbLoginDatumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITbLoginDatumDo
	Not(conds ...gen.Condition) ITbLoginDatumDo
	Or(conds ...gen.Condition) ITbLoginDatumDo
	Select(conds ...field.Expr) ITbLoginDatumDo
	Where(conds ...gen.Condition) ITbLoginDatumDo
	Order(conds ...field.Expr) ITbLoginDatumDo
	Distinct(cols ...field.Expr) ITbLoginDatumDo
	Omit(cols ...field.Expr) ITbLoginDatumDo
	Join(table schema.Tabler, on ...field.Expr) ITbLoginDatumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITbLoginDatumDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITbLoginDatumDo
	Group(cols ...field.Expr) ITbLoginDatumDo
	Having(conds ...gen.Condition) ITbLoginDatumDo
	Limit(limit int) ITbLoginDatumDo
	Offset(offset int) ITbLoginDatumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITbLoginDatumDo
	Unscoped() ITbLoginDatumDo
	Create(values ...*entities.TbLoginDatum) error
	CreateInBatches(values []*entities.TbLoginDatum, batchSize int) error
	Save(values ...*entities.TbLoginDatum) error
	First() (*entities.TbLoginDatum, error)
	Take() (*entities.TbLoginDatum, error)
	Last() (*entities.TbLoginDatum, error)
	Find() ([]*entities.TbLoginDatum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.TbLoginDatum, err error)
	FindInBatches(result *[]*entities.TbLoginDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entities.TbLoginDatum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITbLoginDatumDo
	Assign(attrs ...field.AssignExpr) ITbLoginDatumDo
	Joins(fields ...field.RelationField) ITbLoginDatumDo
	Preload(fields ...field.RelationField) ITbLoginDatumDo
	FirstOrInit() (*entities.TbLoginDatum, error)
	FirstOrCreate() (*entities.TbLoginDatum, error)
	FindByPage(offset int, limit int) (result []*entities.TbLoginDatum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITbLoginDatumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tbLoginDatumDo) Debug() ITbLoginDatumDo {
	return t.withDO(t.DO.Debug())
}

func (t tbLoginDatumDo) WithContext(ctx context.Context) ITbLoginDatumDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tbLoginDatumDo) ReadDB() ITbLoginDatumDo {
	return t.Clauses(dbresolver.Read)
}

func (t tbLoginDatumDo) WriteDB() ITbLoginDatumDo {
	return t.Clauses(dbresolver.Write)
}

func (t tbLoginDatumDo) Session(config *gorm.Session) ITbLoginDatumDo {
	return t.withDO(t.DO.Session(config))
}

func (t tbLoginDatumDo) Clauses(conds ...clause.Expression) ITbLoginDatumDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tbLoginDatumDo) Returning(value interface{}, columns ...string) ITbLoginDatumDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tbLoginDatumDo) Not(conds ...gen.Condition) ITbLoginDatumDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tbLoginDatumDo) Or(conds ...gen.Condition) ITbLoginDatumDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tbLoginDatumDo) Select(conds ...field.Expr) ITbLoginDatumDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tbLoginDatumDo) Where(conds ...gen.Condition) ITbLoginDatumDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tbLoginDatumDo) Order(conds ...field.Expr) ITbLoginDatumDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tbLoginDatumDo) Distinct(cols ...field.Expr) ITbLoginDatumDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tbLoginDatumDo) Omit(cols ...field.Expr) ITbLoginDatumDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tbLoginDatumDo) Join(table schema.Tabler, on ...field.Expr) ITbLoginDatumDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tbLoginDatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITbLoginDatumDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tbLoginDatumDo) RightJoin(table schema.Tabler, on ...field.Expr) ITbLoginDatumDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tbLoginDatumDo) Group(cols ...field.Expr) ITbLoginDatumDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tbLoginDatumDo) Having(conds ...gen.Condition) ITbLoginDatumDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tbLoginDatumDo) Limit(limit int) ITbLoginDatumDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tbLoginDatumDo) Offset(offset int) ITbLoginDatumDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tbLoginDatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITbLoginDatumDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tbLoginDatumDo) Unscoped() ITbLoginDatumDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tbLoginDatumDo) Create(values ...*entities.TbLoginDatum) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tbLoginDatumDo) CreateInBatches(values []*entities.TbLoginDatum, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tbLoginDatumDo) Save(values ...*entities.TbLoginDatum) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tbLoginDatumDo) First() (*entities.TbLoginDatum, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entities.TbLoginDatum), nil
	}
}

func (t tbLoginDatumDo) Take() (*entities.TbLoginDatum, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entities.TbLoginDatum), nil
	}
}

func (t tbLoginDatumDo) Last() (*entities.TbLoginDatum, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entities.TbLoginDatum), nil
	}
}

func (t tbLoginDatumDo) Find() ([]*entities.TbLoginDatum, error) {
	result, err := t.DO.Find()
	return result.([]*entities.TbLoginDatum), err
}

func (t tbLoginDatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.TbLoginDatum, err error) {
	buf := make([]*entities.TbLoginDatum, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tbLoginDatumDo) FindInBatches(result *[]*entities.TbLoginDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tbLoginDatumDo) Attrs(attrs ...field.AssignExpr) ITbLoginDatumDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tbLoginDatumDo) Assign(attrs ...field.AssignExpr) ITbLoginDatumDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tbLoginDatumDo) Joins(fields ...field.RelationField) ITbLoginDatumDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tbLoginDatumDo) Preload(fields ...field.RelationField) ITbLoginDatumDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tbLoginDatumDo) FirstOrInit() (*entities.TbLoginDatum, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entities.TbLoginDatum), nil
	}
}

func (t tbLoginDatumDo) FirstOrCreate() (*entities.TbLoginDatum, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entities.TbLoginDatum), nil
	}
}

func (t tbLoginDatumDo) FindByPage(offset int, limit int) (result []*entities.TbLoginDatum, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tbLoginDatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tbLoginDatumDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tbLoginDatumDo) Delete(models ...*entities.TbLoginDatum) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tbLoginDatumDo) withDO(do gen.Dao) *tbLoginDatumDo {
	t.DO = *do.(*gen.DO)
	return t
}
