// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cutejiuges/easy-blog/models/dal/entities"
)

func newTbFadeBack(db *gorm.DB, opts ...gen.DOOption) tbFadeBack {
	_tbFadeBack := tbFadeBack{}

	_tbFadeBack.tbFadeBackDo.UseDB(db, opts...)
	_tbFadeBack.tbFadeBackDo.UseModel(&entities.TbFadeBack{})

	tableName := _tbFadeBack.tbFadeBackDo.TableName()
	_tbFadeBack.ALL = field.NewAsterisk(tableName)
	_tbFadeBack.ID = field.NewInt64(tableName, "id")
	_tbFadeBack.CreatedAt = field.NewTime(tableName, "created_at")
	_tbFadeBack.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tbFadeBack.DeletedAt = field.NewField(tableName, "deleted_at")
	_tbFadeBack.Email = field.NewString(tableName, "email")
	_tbFadeBack.Content = field.NewString(tableName, "content")
	_tbFadeBack.ApplyContent = field.NewString(tableName, "apply_content")
	_tbFadeBack.IsApply = field.NewInt64(tableName, "is_apply")

	_tbFadeBack.fillFieldMap()

	return _tbFadeBack
}

type tbFadeBack struct {
	tbFadeBackDo tbFadeBackDo

	ALL          field.Asterisk
	ID           field.Int64
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	Email        field.String
	Content      field.String
	ApplyContent field.String
	IsApply      field.Int64

	fieldMap map[string]field.Expr
}

func (t tbFadeBack) Table(newTableName string) *tbFadeBack {
	t.tbFadeBackDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tbFadeBack) As(alias string) *tbFadeBack {
	t.tbFadeBackDo.DO = *(t.tbFadeBackDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tbFadeBack) updateTableName(table string) *tbFadeBack {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.Email = field.NewString(table, "email")
	t.Content = field.NewString(table, "content")
	t.ApplyContent = field.NewString(table, "apply_content")
	t.IsApply = field.NewInt64(table, "is_apply")

	t.fillFieldMap()

	return t
}

func (t *tbFadeBack) WithContext(ctx context.Context) ITbFadeBackDo {
	return t.tbFadeBackDo.WithContext(ctx)
}

func (t tbFadeBack) TableName() string { return t.tbFadeBackDo.TableName() }

func (t tbFadeBack) Alias() string { return t.tbFadeBackDo.Alias() }

func (t tbFadeBack) Columns(cols ...field.Expr) gen.Columns { return t.tbFadeBackDo.Columns(cols...) }

func (t *tbFadeBack) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tbFadeBack) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["email"] = t.Email
	t.fieldMap["content"] = t.Content
	t.fieldMap["apply_content"] = t.ApplyContent
	t.fieldMap["is_apply"] = t.IsApply
}

func (t tbFadeBack) clone(db *gorm.DB) tbFadeBack {
	t.tbFadeBackDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tbFadeBack) replaceDB(db *gorm.DB) tbFadeBack {
	t.tbFadeBackDo.ReplaceDB(db)
	return t
}

type tbFadeBackDo struct{ gen.DO }

type ITbFadeBackDo interface {
	gen.SubQuery
	Debug() ITbFadeBackDo
	WithContext(ctx context.Context) ITbFadeBackDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITbFadeBackDo
	WriteDB() ITbFadeBackDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITbFadeBackDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITbFadeBackDo
	Not(conds ...gen.Condition) ITbFadeBackDo
	Or(conds ...gen.Condition) ITbFadeBackDo
	Select(conds ...field.Expr) ITbFadeBackDo
	Where(conds ...gen.Condition) ITbFadeBackDo
	Order(conds ...field.Expr) ITbFadeBackDo
	Distinct(cols ...field.Expr) ITbFadeBackDo
	Omit(cols ...field.Expr) ITbFadeBackDo
	Join(table schema.Tabler, on ...field.Expr) ITbFadeBackDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITbFadeBackDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITbFadeBackDo
	Group(cols ...field.Expr) ITbFadeBackDo
	Having(conds ...gen.Condition) ITbFadeBackDo
	Limit(limit int) ITbFadeBackDo
	Offset(offset int) ITbFadeBackDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITbFadeBackDo
	Unscoped() ITbFadeBackDo
	Create(values ...*entities.TbFadeBack) error
	CreateInBatches(values []*entities.TbFadeBack, batchSize int) error
	Save(values ...*entities.TbFadeBack) error
	First() (*entities.TbFadeBack, error)
	Take() (*entities.TbFadeBack, error)
	Last() (*entities.TbFadeBack, error)
	Find() ([]*entities.TbFadeBack, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.TbFadeBack, err error)
	FindInBatches(result *[]*entities.TbFadeBack, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entities.TbFadeBack) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITbFadeBackDo
	Assign(attrs ...field.AssignExpr) ITbFadeBackDo
	Joins(fields ...field.RelationField) ITbFadeBackDo
	Preload(fields ...field.RelationField) ITbFadeBackDo
	FirstOrInit() (*entities.TbFadeBack, error)
	FirstOrCreate() (*entities.TbFadeBack, error)
	FindByPage(offset int, limit int) (result []*entities.TbFadeBack, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITbFadeBackDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tbFadeBackDo) Debug() ITbFadeBackDo {
	return t.withDO(t.DO.Debug())
}

func (t tbFadeBackDo) WithContext(ctx context.Context) ITbFadeBackDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tbFadeBackDo) ReadDB() ITbFadeBackDo {
	return t.Clauses(dbresolver.Read)
}

func (t tbFadeBackDo) WriteDB() ITbFadeBackDo {
	return t.Clauses(dbresolver.Write)
}

func (t tbFadeBackDo) Session(config *gorm.Session) ITbFadeBackDo {
	return t.withDO(t.DO.Session(config))
}

func (t tbFadeBackDo) Clauses(conds ...clause.Expression) ITbFadeBackDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tbFadeBackDo) Returning(value interface{}, columns ...string) ITbFadeBackDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tbFadeBackDo) Not(conds ...gen.Condition) ITbFadeBackDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tbFadeBackDo) Or(conds ...gen.Condition) ITbFadeBackDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tbFadeBackDo) Select(conds ...field.Expr) ITbFadeBackDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tbFadeBackDo) Where(conds ...gen.Condition) ITbFadeBackDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tbFadeBackDo) Order(conds ...field.Expr) ITbFadeBackDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tbFadeBackDo) Distinct(cols ...field.Expr) ITbFadeBackDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tbFadeBackDo) Omit(cols ...field.Expr) ITbFadeBackDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tbFadeBackDo) Join(table schema.Tabler, on ...field.Expr) ITbFadeBackDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tbFadeBackDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITbFadeBackDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tbFadeBackDo) RightJoin(table schema.Tabler, on ...field.Expr) ITbFadeBackDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tbFadeBackDo) Group(cols ...field.Expr) ITbFadeBackDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tbFadeBackDo) Having(conds ...gen.Condition) ITbFadeBackDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tbFadeBackDo) Limit(limit int) ITbFadeBackDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tbFadeBackDo) Offset(offset int) ITbFadeBackDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tbFadeBackDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITbFadeBackDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tbFadeBackDo) Unscoped() ITbFadeBackDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tbFadeBackDo) Create(values ...*entities.TbFadeBack) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tbFadeBackDo) CreateInBatches(values []*entities.TbFadeBack, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tbFadeBackDo) Save(values ...*entities.TbFadeBack) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tbFadeBackDo) First() (*entities.TbFadeBack, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entities.TbFadeBack), nil
	}
}

func (t tbFadeBackDo) Take() (*entities.TbFadeBack, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entities.TbFadeBack), nil
	}
}

func (t tbFadeBackDo) Last() (*entities.TbFadeBack, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entities.TbFadeBack), nil
	}
}

func (t tbFadeBackDo) Find() ([]*entities.TbFadeBack, error) {
	result, err := t.DO.Find()
	return result.([]*entities.TbFadeBack), err
}

func (t tbFadeBackDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.TbFadeBack, err error) {
	buf := make([]*entities.TbFadeBack, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tbFadeBackDo) FindInBatches(result *[]*entities.TbFadeBack, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tbFadeBackDo) Attrs(attrs ...field.AssignExpr) ITbFadeBackDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tbFadeBackDo) Assign(attrs ...field.AssignExpr) ITbFadeBackDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tbFadeBackDo) Joins(fields ...field.RelationField) ITbFadeBackDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tbFadeBackDo) Preload(fields ...field.RelationField) ITbFadeBackDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tbFadeBackDo) FirstOrInit() (*entities.TbFadeBack, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entities.TbFadeBack), nil
	}
}

func (t tbFadeBackDo) FirstOrCreate() (*entities.TbFadeBack, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entities.TbFadeBack), nil
	}
}

func (t tbFadeBackDo) FindByPage(offset int, limit int) (result []*entities.TbFadeBack, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tbFadeBackDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tbFadeBackDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tbFadeBackDo) Delete(models ...*entities.TbFadeBack) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tbFadeBackDo) withDO(do gen.Dao) *tbFadeBackDo {
	t.DO = *do.(*gen.DO)
	return t
}
