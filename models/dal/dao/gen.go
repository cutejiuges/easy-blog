// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q             = new(Query)
	TbAdvert      *tbAdvert
	TbArticle     *tbArticle
	TbArticleTag  *tbArticleTag
	TbBanner      *tbBanner
	TbComment     *tbComment
	TbFadeBack    *tbFadeBack
	TbLoginDatum  *tbLoginDatum
	TbMenu        *tbMenu
	TbMenuBanner  *tbMenuBanner
	TbMessage     *tbMessage
	TbTag         *tbTag
	TbUser        *tbUser
	TbUserCollect *tbUserCollect
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	TbAdvert = &Q.TbAdvert
	TbArticle = &Q.TbArticle
	TbArticleTag = &Q.TbArticleTag
	TbBanner = &Q.TbBanner
	TbComment = &Q.TbComment
	TbFadeBack = &Q.TbFadeBack
	TbLoginDatum = &Q.TbLoginDatum
	TbMenu = &Q.TbMenu
	TbMenuBanner = &Q.TbMenuBanner
	TbMessage = &Q.TbMessage
	TbTag = &Q.TbTag
	TbUser = &Q.TbUser
	TbUserCollect = &Q.TbUserCollect
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:            db,
		TbAdvert:      newTbAdvert(db, opts...),
		TbArticle:     newTbArticle(db, opts...),
		TbArticleTag:  newTbArticleTag(db, opts...),
		TbBanner:      newTbBanner(db, opts...),
		TbComment:     newTbComment(db, opts...),
		TbFadeBack:    newTbFadeBack(db, opts...),
		TbLoginDatum:  newTbLoginDatum(db, opts...),
		TbMenu:        newTbMenu(db, opts...),
		TbMenuBanner:  newTbMenuBanner(db, opts...),
		TbMessage:     newTbMessage(db, opts...),
		TbTag:         newTbTag(db, opts...),
		TbUser:        newTbUser(db, opts...),
		TbUserCollect: newTbUserCollect(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	TbAdvert      tbAdvert
	TbArticle     tbArticle
	TbArticleTag  tbArticleTag
	TbBanner      tbBanner
	TbComment     tbComment
	TbFadeBack    tbFadeBack
	TbLoginDatum  tbLoginDatum
	TbMenu        tbMenu
	TbMenuBanner  tbMenuBanner
	TbMessage     tbMessage
	TbTag         tbTag
	TbUser        tbUser
	TbUserCollect tbUserCollect
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		TbAdvert:      q.TbAdvert.clone(db),
		TbArticle:     q.TbArticle.clone(db),
		TbArticleTag:  q.TbArticleTag.clone(db),
		TbBanner:      q.TbBanner.clone(db),
		TbComment:     q.TbComment.clone(db),
		TbFadeBack:    q.TbFadeBack.clone(db),
		TbLoginDatum:  q.TbLoginDatum.clone(db),
		TbMenu:        q.TbMenu.clone(db),
		TbMenuBanner:  q.TbMenuBanner.clone(db),
		TbMessage:     q.TbMessage.clone(db),
		TbTag:         q.TbTag.clone(db),
		TbUser:        q.TbUser.clone(db),
		TbUserCollect: q.TbUserCollect.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		TbAdvert:      q.TbAdvert.replaceDB(db),
		TbArticle:     q.TbArticle.replaceDB(db),
		TbArticleTag:  q.TbArticleTag.replaceDB(db),
		TbBanner:      q.TbBanner.replaceDB(db),
		TbComment:     q.TbComment.replaceDB(db),
		TbFadeBack:    q.TbFadeBack.replaceDB(db),
		TbLoginDatum:  q.TbLoginDatum.replaceDB(db),
		TbMenu:        q.TbMenu.replaceDB(db),
		TbMenuBanner:  q.TbMenuBanner.replaceDB(db),
		TbMessage:     q.TbMessage.replaceDB(db),
		TbTag:         q.TbTag.replaceDB(db),
		TbUser:        q.TbUser.replaceDB(db),
		TbUserCollect: q.TbUserCollect.replaceDB(db),
	}
}

type queryCtx struct {
	TbAdvert      ITbAdvertDo
	TbArticle     ITbArticleDo
	TbArticleTag  ITbArticleTagDo
	TbBanner      ITbBannerDo
	TbComment     ITbCommentDo
	TbFadeBack    ITbFadeBackDo
	TbLoginDatum  ITbLoginDatumDo
	TbMenu        ITbMenuDo
	TbMenuBanner  ITbMenuBannerDo
	TbMessage     ITbMessageDo
	TbTag         ITbTagDo
	TbUser        ITbUserDo
	TbUserCollect ITbUserCollectDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		TbAdvert:      q.TbAdvert.WithContext(ctx),
		TbArticle:     q.TbArticle.WithContext(ctx),
		TbArticleTag:  q.TbArticleTag.WithContext(ctx),
		TbBanner:      q.TbBanner.WithContext(ctx),
		TbComment:     q.TbComment.WithContext(ctx),
		TbFadeBack:    q.TbFadeBack.WithContext(ctx),
		TbLoginDatum:  q.TbLoginDatum.WithContext(ctx),
		TbMenu:        q.TbMenu.WithContext(ctx),
		TbMenuBanner:  q.TbMenuBanner.WithContext(ctx),
		TbMessage:     q.TbMessage.WithContext(ctx),
		TbTag:         q.TbTag.WithContext(ctx),
		TbUser:        q.TbUser.WithContext(ctx),
		TbUserCollect: q.TbUserCollect.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
