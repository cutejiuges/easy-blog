// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cutejiuges/easy-blog/models/dal/entities"
)

func newTbUserCollect(db *gorm.DB, opts ...gen.DOOption) tbUserCollect {
	_tbUserCollect := tbUserCollect{}

	_tbUserCollect.tbUserCollectDo.UseDB(db, opts...)
	_tbUserCollect.tbUserCollectDo.UseModel(&entities.TbUserCollect{})

	tableName := _tbUserCollect.tbUserCollectDo.TableName()
	_tbUserCollect.ALL = field.NewAsterisk(tableName)
	_tbUserCollect.ID = field.NewInt64(tableName, "id")
	_tbUserCollect.CreatedAt = field.NewTime(tableName, "created_at")
	_tbUserCollect.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tbUserCollect.DeletedAt = field.NewField(tableName, "deleted_at")
	_tbUserCollect.UserID = field.NewInt64(tableName, "user_id")
	_tbUserCollect.ArticleID = field.NewInt64(tableName, "article_id")

	_tbUserCollect.fillFieldMap()

	return _tbUserCollect
}

type tbUserCollect struct {
	tbUserCollectDo tbUserCollectDo

	ALL       field.Asterisk
	ID        field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	UserID    field.Int64
	ArticleID field.Int64

	fieldMap map[string]field.Expr
}

func (t tbUserCollect) Table(newTableName string) *tbUserCollect {
	t.tbUserCollectDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tbUserCollect) As(alias string) *tbUserCollect {
	t.tbUserCollectDo.DO = *(t.tbUserCollectDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tbUserCollect) updateTableName(table string) *tbUserCollect {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.UserID = field.NewInt64(table, "user_id")
	t.ArticleID = field.NewInt64(table, "article_id")

	t.fillFieldMap()

	return t
}

func (t *tbUserCollect) WithContext(ctx context.Context) ITbUserCollectDo {
	return t.tbUserCollectDo.WithContext(ctx)
}

func (t tbUserCollect) TableName() string { return t.tbUserCollectDo.TableName() }

func (t tbUserCollect) Alias() string { return t.tbUserCollectDo.Alias() }

func (t tbUserCollect) Columns(cols ...field.Expr) gen.Columns {
	return t.tbUserCollectDo.Columns(cols...)
}

func (t *tbUserCollect) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tbUserCollect) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["article_id"] = t.ArticleID
}

func (t tbUserCollect) clone(db *gorm.DB) tbUserCollect {
	t.tbUserCollectDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tbUserCollect) replaceDB(db *gorm.DB) tbUserCollect {
	t.tbUserCollectDo.ReplaceDB(db)
	return t
}

type tbUserCollectDo struct{ gen.DO }

type ITbUserCollectDo interface {
	gen.SubQuery
	Debug() ITbUserCollectDo
	WithContext(ctx context.Context) ITbUserCollectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITbUserCollectDo
	WriteDB() ITbUserCollectDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITbUserCollectDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITbUserCollectDo
	Not(conds ...gen.Condition) ITbUserCollectDo
	Or(conds ...gen.Condition) ITbUserCollectDo
	Select(conds ...field.Expr) ITbUserCollectDo
	Where(conds ...gen.Condition) ITbUserCollectDo
	Order(conds ...field.Expr) ITbUserCollectDo
	Distinct(cols ...field.Expr) ITbUserCollectDo
	Omit(cols ...field.Expr) ITbUserCollectDo
	Join(table schema.Tabler, on ...field.Expr) ITbUserCollectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITbUserCollectDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITbUserCollectDo
	Group(cols ...field.Expr) ITbUserCollectDo
	Having(conds ...gen.Condition) ITbUserCollectDo
	Limit(limit int) ITbUserCollectDo
	Offset(offset int) ITbUserCollectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITbUserCollectDo
	Unscoped() ITbUserCollectDo
	Create(values ...*entities.TbUserCollect) error
	CreateInBatches(values []*entities.TbUserCollect, batchSize int) error
	Save(values ...*entities.TbUserCollect) error
	First() (*entities.TbUserCollect, error)
	Take() (*entities.TbUserCollect, error)
	Last() (*entities.TbUserCollect, error)
	Find() ([]*entities.TbUserCollect, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.TbUserCollect, err error)
	FindInBatches(result *[]*entities.TbUserCollect, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entities.TbUserCollect) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITbUserCollectDo
	Assign(attrs ...field.AssignExpr) ITbUserCollectDo
	Joins(fields ...field.RelationField) ITbUserCollectDo
	Preload(fields ...field.RelationField) ITbUserCollectDo
	FirstOrInit() (*entities.TbUserCollect, error)
	FirstOrCreate() (*entities.TbUserCollect, error)
	FindByPage(offset int, limit int) (result []*entities.TbUserCollect, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITbUserCollectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tbUserCollectDo) Debug() ITbUserCollectDo {
	return t.withDO(t.DO.Debug())
}

func (t tbUserCollectDo) WithContext(ctx context.Context) ITbUserCollectDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tbUserCollectDo) ReadDB() ITbUserCollectDo {
	return t.Clauses(dbresolver.Read)
}

func (t tbUserCollectDo) WriteDB() ITbUserCollectDo {
	return t.Clauses(dbresolver.Write)
}

func (t tbUserCollectDo) Session(config *gorm.Session) ITbUserCollectDo {
	return t.withDO(t.DO.Session(config))
}

func (t tbUserCollectDo) Clauses(conds ...clause.Expression) ITbUserCollectDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tbUserCollectDo) Returning(value interface{}, columns ...string) ITbUserCollectDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tbUserCollectDo) Not(conds ...gen.Condition) ITbUserCollectDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tbUserCollectDo) Or(conds ...gen.Condition) ITbUserCollectDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tbUserCollectDo) Select(conds ...field.Expr) ITbUserCollectDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tbUserCollectDo) Where(conds ...gen.Condition) ITbUserCollectDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tbUserCollectDo) Order(conds ...field.Expr) ITbUserCollectDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tbUserCollectDo) Distinct(cols ...field.Expr) ITbUserCollectDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tbUserCollectDo) Omit(cols ...field.Expr) ITbUserCollectDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tbUserCollectDo) Join(table schema.Tabler, on ...field.Expr) ITbUserCollectDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tbUserCollectDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITbUserCollectDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tbUserCollectDo) RightJoin(table schema.Tabler, on ...field.Expr) ITbUserCollectDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tbUserCollectDo) Group(cols ...field.Expr) ITbUserCollectDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tbUserCollectDo) Having(conds ...gen.Condition) ITbUserCollectDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tbUserCollectDo) Limit(limit int) ITbUserCollectDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tbUserCollectDo) Offset(offset int) ITbUserCollectDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tbUserCollectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITbUserCollectDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tbUserCollectDo) Unscoped() ITbUserCollectDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tbUserCollectDo) Create(values ...*entities.TbUserCollect) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tbUserCollectDo) CreateInBatches(values []*entities.TbUserCollect, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tbUserCollectDo) Save(values ...*entities.TbUserCollect) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tbUserCollectDo) First() (*entities.TbUserCollect, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entities.TbUserCollect), nil
	}
}

func (t tbUserCollectDo) Take() (*entities.TbUserCollect, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entities.TbUserCollect), nil
	}
}

func (t tbUserCollectDo) Last() (*entities.TbUserCollect, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entities.TbUserCollect), nil
	}
}

func (t tbUserCollectDo) Find() ([]*entities.TbUserCollect, error) {
	result, err := t.DO.Find()
	return result.([]*entities.TbUserCollect), err
}

func (t tbUserCollectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.TbUserCollect, err error) {
	buf := make([]*entities.TbUserCollect, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tbUserCollectDo) FindInBatches(result *[]*entities.TbUserCollect, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tbUserCollectDo) Attrs(attrs ...field.AssignExpr) ITbUserCollectDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tbUserCollectDo) Assign(attrs ...field.AssignExpr) ITbUserCollectDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tbUserCollectDo) Joins(fields ...field.RelationField) ITbUserCollectDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tbUserCollectDo) Preload(fields ...field.RelationField) ITbUserCollectDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tbUserCollectDo) FirstOrInit() (*entities.TbUserCollect, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entities.TbUserCollect), nil
	}
}

func (t tbUserCollectDo) FirstOrCreate() (*entities.TbUserCollect, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entities.TbUserCollect), nil
	}
}

func (t tbUserCollectDo) FindByPage(offset int, limit int) (result []*entities.TbUserCollect, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tbUserCollectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tbUserCollectDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tbUserCollectDo) Delete(models ...*entities.TbUserCollect) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tbUserCollectDo) withDO(do gen.Dao) *tbUserCollectDo {
	t.DO = *do.(*gen.DO)
	return t
}
